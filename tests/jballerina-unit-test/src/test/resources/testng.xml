<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  ~
  -->

<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >

<suite name="ballerina-test-suite">

    <listeners>
        <listener class-name="org.ballerinalang.test.utils.BLogInitializer"/>
        <listener class-name="org.ballerinalang.test.listener.JBallerinaTestInitializer"/>
        <!--<listener class-name="org.ballerinalang.test.utils.TestNGListener"/>-->
    </listeners>
    <test name="jballerina-test" parallel="false">
        <parameter name="enableJBallerinaTests" value="true"/>
        <groups>
            <run>
                <exclude name="brokenOnJBallerina"/>
            </run>
        </groups>
        <packages>
            <package name="org.ballerinalang.test.vm.*"/>
            <package name="org.ballerinalang.test.annotations.*"/>
            <package name="org.ballerinalang.test.imports.*"/>
            <package name="org.ballerinalang.test.parser.*"/>
            <!-- <package name="org.ballerinalang.test.privacy.*"/> -->
            <package name="org.ballerinalang.test.dataflow.*"/>
            <package name="org.ballerinalang.test.variable.shadowing.*"/>
            <package name="org.ballerinalang.test.net.*"/>
            <package name="org.ballerinalang.test.typedefs.*"/>
            <package name="org.ballerinalang.test.access.*"/>
            <package name="org.ballerinalang.test.structs.*"/>
            <package name="org.ballerinalang.test.jvm.*"/>
            <package name="org.ballerinalang.test.types.integer"/>
            <package name="org.ballerinalang.test.types.floattype"/>
            <package name="org.ballerinalang.test.main.function.*"/>
            <package name="org.ballerinalang.test.expressions.unaryoperations.*"/>
            <package name="org.ballerinalang.test.expressions.binaryoperations.*"/>
            <package name="org.ballerinalang.test.types.decimaltype.*"/>
            <package name="org.ballerinalang.test.types.any.*"/>
            <package name="org.ballerinalang.test.expressions.builtinoperations.*"/>
            <package name="org.ballerinalang.test.expressions.builtinfunctions.*"/>
            <package name="org.ballerinalang.test.expressions.stamp.*"/>
            <package name="org.ballerinalang.test.expressions.conversion.*"/>
            <package name="org.ballerinalang.test.expressions.fieldaccess.*"/>
            <package name="org.ballerinalang.test.error.*"/>
            <package name="org.ballerinalang.test.types.finaltypes.*"/>
            <package name="org.ballerinalang.test.types.finite.*"/>
            <package name="org.ballerinalang.test.types.map.*"/>
            <package name="org.ballerinalang.test.types.string.*"/>
            <package name="org.ballerinalang.test.types.errors.*"/>
            <package name="org.ballerinalang.test.types.var.*"/>
            <package name="org.ballerinalang.test.types.uniontypes.*"/>
            <package name="org.ballerinalang.test.types.typedesc.*"/>
            <package name="org.ballerinalang.test.types.tuples.*"/>
            <package name="org.ballerinalang.test.types.anydata.*"/>
            <package name="org.ballerinalang.test.statements.arrays.*"/>
            <package name="org.ballerinalang.test.statements.assign.*"/>
            <package name="org.ballerinalang.test.statements.block.*"/>
            <package name="org.ballerinalang.test.statements.breakstatement.*"/>
            <package name="org.ballerinalang.test.statements.comment.*"/>
            <package name="org.ballerinalang.test.statements.compoundassignment.*"/>
            <package name="org.ballerinalang.test.statements.continuestatement.*"/>
            <package name="org.ballerinalang.test.statements.expressionstmt.*"/>
            <package name="org.ballerinalang.test.statements.ifelse.*"/>
            <package name="org.ballerinalang.test.statements.packageimport.*"/>
            <package name="org.ballerinalang.test.statements.returnstmt.*"/>
            <package name="org.ballerinalang.test.statements.vardeclr.*"/>
            <package name="org.ballerinalang.test.statements.whilestatement.*"/>
            <package name="org.ballerinalang.test.statements.foreach.*"/>
            <package name="org.ballerinalang.test.types.json.*"/>
            <package name="org.ballerinalang.test.types.nullable.*"/>
            <package name="org.ballerinalang.test.types.nullvalue.*"/>
            <package name="org.ballerinalang.test.types.globalvar.*"/>
            <package name="org.ballerinalang.test.object.*" />
            <package name="org.ballerinalang.test.dataflow.analysis.*" />
            <package name="org.ballerinalang.test.documentation.*" />
            <package name="org.ballerinalang.test.endpoint.*" />
            <package name="org.ballerinalang.test.enum.*" />
            <!-- <package name="org.ballerinalang.test.loc.*" /> -->
            <package name="org.ballerinalang.test.packaging.*" />
            <package name="org.ballerinalang.test.types.xml.*" />
            <package name="org.ballerinalang.test.record.*"/>
        </packages>

        <classes>
            <class name="org.ballerinalang.test.functions.FunctionSignatureTest" >
                <methods>
                    <exclude name="testOptionalArgsInNativeFunc" />
                </methods>
            </class>
            <class name="org.ballerinalang.test.functions.FunctionsWithDefaultableArguments" />
            <class name="org.ballerinalang.test.closures.VarMutabilityClosureTest" />
            <class name="org.ballerinalang.test.expressions.checkedexpr.CheckedExpressionOperatorTest">
                <methods>
                    <exclude name="testSemanticErrorsWithResources"/>
                    <exclude name="testCheckInBinaryAndExpression"/>
                    <exclude name="testCheckExprInBinaryExpr7"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.expressions.elvis.ElvisExpressionTest"/>
            <class name="org.ballerinalang.test.expressions.typeof.TypeofOverLiteralExpressionTest" />
            <class name="org.ballerinalang.test.worker.WorkerCallingFunction"/>

            <class name="org.ballerinalang.test.expressions.ternary.TernaryExpressionTest"/>
            <class name="org.ballerinalang.test.types.string.StringTemplateLiteralTest"/>

            <class name="org.ballerinalang.test.types.constant.ConstantAccessTest" />
            <class name="org.ballerinalang.test.types.constant.ConstantAccessNegativeTest" />
            <class name="org.ballerinalang.test.types.constant.ConstantAccessTest" />
            <class name="org.ballerinalang.test.types.constant.ConstantAssignmentTest"/>
            <class name="org.ballerinalang.test.types.constant.ConstantInTypeDefinitionTest" />
            <class name="org.ballerinalang.test.types.constant.SimpleConstantNegativeTest" />
            <class name="org.ballerinalang.test.types.constant.SimpleConstantTest" />
<!--            <class name="org.ballerinalang.test.types.constant.MapConstantTest" />-->

            <class name="org.ballerinalang.test.worker.BasicForkTest"/>
            <class name="org.ballerinalang.test.worker.BasicWorkerTest"/>
            <class name="org.ballerinalang.test.worker.WaitForAnyActionsTest"/>
            <class name="org.ballerinalang.test.worker.WaitForAllActionsTest"/>
            <class name="org.ballerinalang.test.worker.WorkerTest"/>
            <class name="org.ballerinalang.test.worker.WorkerSyncSendTest"/>
            <class name="org.ballerinalang.test.worker.WorkerInActionTest">
                <methods>
                    <exclude name="testConnectorAction1"/>
                    <exclude name="testConnectorAction2"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.WorkerInFunctionTest"/>
            <class name="org.ballerinalang.test.worker.WorkerFlushTest"/>
            <class name="org.ballerinalang.test.worker.WorkerFailTest"/>
            <class name="org.ballerinalang.test.worker.WorkerCancelledTest"/>
            <class name="org.ballerinalang.test.worker.WorkerCallingFunction"/>
            <class name="org.ballerinalang.test.worker.WaitForOneActionsTest"/>
            <class name="org.ballerinalang.test.worker.WaitActionsNegativeTest"/>
            <class name="org.ballerinalang.test.worker.StackOverflowTest">
                <methods>
                    <!--TODO:Need to improve error detail transformation, java errors get returned-->
                    <exclude name="recursiveFunction"/>
                    <exclude name="testStackOverflowInFunction"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.NotSoBasicWorkerTest">
                <methods>
                    <!--TODO:convert within while returns empty-->
                    <exclude name="largeForkCreationTest"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.worker.ForkReturnAnyTest"/>
            <class name="org.ballerinalang.test.worker.ForkInFunctionTest"/>
            <class name="org.ballerinalang.test.worker.BasicWorkerActionsNegativeTest"/>
            <class name="org.ballerinalang.test.worker.BasicWorkerActionsNegativeTest"/>
            <class name="org.ballerinalang.test.worker.BasicForkNegativeTest"/>
            <class name="org.ballerinalang.test.worker.WorkerCancelledTest"/>
            <!--<class name="org.ballerinalang.test.io.IOTest"/>-->
            <class name="org.ballerinalang.test.expressions.lambda.FunctionPointersTest" >
                <methods>
                    <exclude name="testFunctionPointerNative"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.lock.LocksInMainTest">
                <methods>
                    <include name="simpleLock"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.types.bytetype.BByteOperationsTest" />
            <class name="org.ballerinalang.test.types.bytetype.BByteArrayValueNegativeTest" />
            <class name="org.ballerinalang.test.types.bytetype.BByteValueNegativeTest" />
            <class name="org.ballerinalang.test.types.bytetype.BByteValueTest">
                <methods>
                    <exclude name="simpleWorkerMessagePassingTest"/>
                </methods>
            </class>
            <class name="org.ballerinalang.test.types.table.TableSqlQueryTest"/>
            <class name="org.ballerinalang.test.types.globalvar.GlobalVarFunctionTest"/>
            <class name="org.ballerinalang.test.types.globalvar.GlobalVarFunctionWithPkgTest"/>
            <class name="org.ballerinalang.test.types.globalvar.GlobalVarNegativeTest"/>
            <class name="org.ballerinalang.test.types.stream.BStreamValueTest"/>
            <class name="org.ballerinalang.test.types.TypeUnificationTest"/>
            <class name="org.ballerinalang.test.variable.shadowing.VariableShadowingTest"/>
            <class name="org.ballerinalang.test.variable.shadowing.VariableShadowingNegativeTest"/>
        </classes>
    </test>
</suite>
