{
  "position": {
    "line": 11,
    "character": 10
  },
  "source": "resource/source/completionBeforeUnderscore1.bal",
  "items": [
    {
      "label": "openReadableFile(string path)(ballerina/io:ReadableByteChannel|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nRetrieves a ReadableByteChannel from a given file path.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Relative/absolute path string to locate the file  \n  \n  \n**Return**  \nballerina/io:ReadableByteChannel|error"
        }
      },
      "insertText": "openReadableFile(${1:path})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "openWritableFile(string path)(ballerina/io:WritableByteChannel)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nRetrieves a WritableByteChannel from a given file path.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    Relative/absolute path string to locate the file  \n  \n- _append_  \n    Append to end of file.  \nDefault Value: false  \n  \n**Return**  \nballerina/io:WritableByteChannel"
        }
      },
      "insertText": "openWritableFile(${1:path})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "createReadableChannel(byte[] content)(ballerina/io:ReadableByteChannel)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nCreates an in-memory channel which will reference stream of bytes.\n  \n  \n---    \n**Parameters**  \n- _content_  \n    Content which should be exposed as channel  \n  \n  \n**Return**  \nballerina/io:ReadableByteChannel"
        }
      },
      "insertText": "createReadableChannel(${1:content})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "openReadableCsvFile(string path)(ballerina/io:ReadableCSVChannel|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nRetrieves a readable CSV channel from a give file path.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    File path which describes the location of the CSV  \n  \n- _fieldSeparator_  \n    CSV record separator (i.e comma or tab)  \nDefault Value: ,  \n- _charset_  \n    Encoding characters in the file represents  \nDefault Value: UTF-8  \n- _skipHeaders_  \n    Number of headers which should be skipped  \nDefault Value: 0  \n  \n**Return**  \nballerina/io:ReadableCSVChannel|error"
        }
      },
      "insertText": "openReadableCsvFile(${1:path})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "openWritableCsvFile(string path)(ballerina/io:WritableCSVChannel)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nRetrieves a writable CSV channel from a give file path.\n  \n  \n---    \n**Parameters**  \n- _path_  \n    File path which describes the location of the CSV  \n  \n- _fieldSeparator_  \n    CSV record separator (i.e comma or tab)  \nDefault Value: ,  \n- _charset_  \n    Encoding characters in the file represents  \nDefault Value: UTF-8  \n- _skipHeaders_  \n    Number of headers which should be skipped  \nDefault Value: 0  \n  \n**Return**  \nballerina/io:WritableCSVChannel"
        }
      },
      "insertText": "openWritableCsvFile(${1:path})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "print()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nPrints `any` or `error` value(s) to the STDOUT.  \n  \n---    \n**Parameters**  \n- _values_  \n    The value(s) to be printed.  \n"
        }
      },
      "insertText": "print();",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "println()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nPrints `any` or `error` value(s) to the STDOUT followed by a new line.  \n  \n---    \n**Parameters**  \n- _values_  \n    The value(s) to be printed.  \n"
        }
      },
      "insertText": "println();",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "sprintf(string format)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nReturns a formatted string using the specified format string and arguments. Following format specifiers are allowed.\n   b              boolean\n   B              boolean (ALL_CAPS)\n   d              int\n   f              float\n   x              hex\n   X              HEX (ALL_CAPS)\n   s              string (This specifier is applicable for any of the supported types in Ballerina.\n                  These values will be converted to their string representation.)\n  \n  \n---    \n**Parameters**  \n- _format_  \n    A format string  \n  \n- _args_  \n    Arguments referenced by the format specifiers in the format string.  \n  \n  \n**Return**  \nstring"
        }
      },
      "insertText": "sprintf(${1:format})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "readln(any a)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/io_  \n  \nReturns the input read from STDIN.\n  \n  \n---    \n**Parameters**  \n- _a_  \n    Any value to be printed  \n  \n  \n**Return**  \nstring"
        }
      },
      "insertText": "readln(${1:a})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IOError",
      "kind": "Class",
      "detail": "Record",
      "insertText": "IOError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadableByteChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "ReadableByteChannel represents an input resource (i.e file, socket). which could be used to source bytes."
      },
      "insertText": "ReadableByteChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadableCharacterChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a channel which could be used to read characters through a given ReadableByteChannel."
      },
      "insertText": "ReadableCharacterChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadableCSVChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a ReadableCSVChannel which could be used to read records from CSV file."
      },
      "insertText": "ReadableCSVChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadableDataChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a data channel for reading data."
      },
      "insertText": "ReadableDataChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadableTextRecordChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a channel which will allow to read"
      },
      "insertText": "ReadableTextRecordChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "StringReader",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a reader which will wrap string content as a channel."
      },
      "insertText": "StringReader",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritableByteChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "WritableByteChannel represents an output resource (i.e file, socket). which could be used to sink bytes."
      },
      "insertText": "WritableByteChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritableCharacterChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a channel which could be used to write characters through a given WritableCharacterChannel."
      },
      "insertText": "WritableCharacterChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritableCSVChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a WritableCSVChannel which could be used to write records from CSV file."
      },
      "insertText": "WritableCSVChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritableDataChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a WritableDataChannel for writing data."
      },
      "insertText": "WritableDataChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritableTextRecordChannel",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a channel which will allow to write records through a given WritableCharacterChannel."
      },
      "insertText": "WritableTextRecordChannel",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Format",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Format which will be used to represent the CSV.\n\nDEFAULT - Would default to the format specified by CSVChannel. Precedence will be given to field\n          separator and record separator.\n\nCSV - Field separator would be \",\" and the record separator would be new line.\n\nTDF - Field separator will be tab and record separator will be new line."
      },
      "insertText": "Format",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Separator",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Field separators which are supported by DelimitedTextRecordChannel."
      },
      "insertText": "Separator",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Mode",
      "kind": "Enum",
      "detail": "Union",
      "insertText": "Mode",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ByteOrder",
      "kind": "Enum",
      "detail": "Finite",
      "documentation": {
        "left": "Represents network byte order.\n\nBIG_ENDIAN - specifies the bytes to be in the order of most significant byte first\n\nLITTLE_ENDIAN - specifies the byte order to be the least significant byte first"
      },
      "insertText": "ByteOrder",
      "insertTextFormat": "Snippet"
    }
  ]
}