{
  "position": {
    "line": 5,
    "character": 28
  },
  "source": "function/source/chainCompletion2.bal",
  "items": [
    {
      "label": "setFileAsEntityBody(string filePath)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with a given file. This method overrides any existing `content-type` headers\nwith the default content type `application/octet-stream`. The default value `application/octet-stream`\ncan be overridden by passing the content type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _filePath_  \n    Represents the path to the file  \n  \n- _contentType_  \n    Content type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value.  \nDefault Value: application/octet-stream"
        }
      },
      "sortText": "121",
      "insertText": "setFileAsEntityBody(${1:filePath});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setBody(string|xml|json|byte[]|ballerina/io:ReadableByteChannel|ballerina/mime:Entity[] entityBody)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given content.\n  \n  \n---    \n**Parameters**  \n- _entityBody_  \n    Entity body can be of type `string`,`xml`,`json`,`byte[]`,`io:ReadableByteChannel` or `Entity[]`  \n"
        }
      },
      "sortText": "121",
      "insertText": "setBody(${1:entityBody});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentType(string mediaType)(error?)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content-type to entity.\n  \n  \n---    \n**Parameters**  \n- _mediaType_  \n    Content type that needs to be set to the entity  \n  \n  \n**Return**  \nerror?"
        }
      },
      "sortText": "121",
      "insertText": "setContentType(${1:mediaType})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getContentType()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content type of entity.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "121",
      "insertText": "getContentType()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentId(string contentId)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content ID of the entity.\n  \n  \n---    \n**Parameters**  \n- _contentId_  \n    Content ID that needs to be set to entity  \n"
        }
      },
      "sortText": "121",
      "insertText": "setContentId(${1:contentId});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getContentId()(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content ID of entity.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "121",
      "insertText": "getContentId()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentLength(int contentLength)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content length of the entity.\n  \n  \n---    \n**Parameters**  \n- _contentLength_  \n    Content length that needs to be set to entity  \n"
        }
      },
      "sortText": "121",
      "insertText": "setContentLength(${1:contentLength});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getContentLength()(int|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content length of entity.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nint|error"
        }
      },
      "sortText": "121",
      "insertText": "getContentLength()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setContentDisposition(mime:ContentDisposition contentDisposition)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the content disposition of the entity.\n  \n  \n---    \n**Parameters**  \n- _contentDisposition_  \n    Content disposition that needs to be set to entity  \n"
        }
      },
      "sortText": "121",
      "insertText": "setContentDisposition(${1:contentDisposition});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getContentDisposition()(ballerina/mime:ContentDisposition)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the content disposition of entity.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nballerina/mime:ContentDisposition"
        }
      },
      "sortText": "121",
      "insertText": "getContentDisposition()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setJson(json jsonContent)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given `json` content. This method overrides any existing `content-type` headers\nwith the default content type `application/json`. The default value `application/json` can be overridden\nby passing the content type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _jsonContent_  \n    JSON content that needs to be set to entity  \n  \n- _contentType_  \n    Content type to be used with the payload. This is an optional parameter. `application/json`\n                is used as the default value.  \nDefault Value: application/json"
        }
      },
      "sortText": "121",
      "insertText": "setJson(${1:jsonContent});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getJson()(json|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nExtracts JSON body from the entity. If the entity body is not a JSON, an error is returned.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \njson|error"
        }
      },
      "sortText": "121",
      "insertText": "getJson()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setXml(xml xmlContent)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given XML content. This method overrides any existing content-type headers\nwith the default content-type `application/xml`. The default value `application/xml` can be overridden\nby passing the content-type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _xmlContent_  \n    XML content that needs to be set to entity  \n  \n- _contentType_  \n    Content type to be used with the payload. This is an optional parameter. `application/xml`\n                is used as the default value.  \nDefault Value: application/xml"
        }
      },
      "sortText": "121",
      "insertText": "setXml(${1:xmlContent});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getXml()(xml|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nExtracts `xml` body from the entity. If the entity body is not an XML, an error is returned.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nxml|error"
        }
      },
      "sortText": "121",
      "insertText": "getXml()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setText(string textContent)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given text content. This method overrides any existing content-type headers\nwith the default content-type `text/plain`. The default value `text/plain` can be overridden\nby passing the content type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _textContent_  \n    Text content that needs to be set to entity  \n  \n- _contentType_  \n    Content type to be used with the payload. This is an optional parameter. `text/plain`\n                is used as the default value.  \nDefault Value: text/plain"
        }
      },
      "sortText": "121",
      "insertText": "setText(${1:textContent});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getText()(string|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nExtracts text body from the entity. If the entity body is not text compatible an error is returned.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring|error"
        }
      },
      "sortText": "121",
      "insertText": "getText()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setByteArray(byte[] blobContent)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given byte[] content. This method overrides any existing `content-type` headers\nwith the default content type `application/octet-stream`. The default value `application/octet-stream`\ncan be overridden by passing the content type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _blobContent_  \n    byte[] content that needs to be set to entity  \n  \n- _contentType_  \n    Content type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value.  \nDefault Value: application/octet-stream"
        }
      },
      "sortText": "121",
      "insertText": "setByteArray(${1:blobContent});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getByteArray()(byte[]|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets the entity body as a `byte[]`. If the entity size is considerably large consider\nusing getByteChannel() method instead.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nbyte[]|error"
        }
      },
      "sortText": "121",
      "insertText": "getByteArray()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setByteChannel(io:ReadableByteChannel byteChannel)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the entity body with the given byte channel content. This method overrides any existing content-type headers\nwith the default content-type `application/octet-stream`. The default value `application/octet-stream`\ncan be overridden by passing the content-type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _byteChannel_  \n    Byte channel that needs to be set to entity  \n  \n- _contentType_  \n    Content-type to be used with the payload. This is an optional parameter.\n                `application/octet-stream` is used as the default value.  \nDefault Value: application/octet-stream"
        }
      },
      "sortText": "121",
      "insertText": "setByteChannel(${1:byteChannel});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getByteChannel()(ballerina/io:ReadableByteChannel|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets the entity body as a byte channel.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nballerina/io:ReadableByteChannel|error"
        }
      },
      "sortText": "121",
      "insertText": "getByteChannel()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getBodyParts()(ballerina/mime:Entity[]|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets its body parts. If the entity body is not a set of body parts an error will be returned.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nballerina/mime:Entity[]|error"
        }
      },
      "sortText": "121",
      "insertText": "getBodyParts()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getBodyPartsAsChannel()(ballerina/io:ReadableByteChannel|error)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGiven an entity, gets the body parts as a byte channel.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nballerina/io:ReadableByteChannel|error"
        }
      },
      "sortText": "121",
      "insertText": "getBodyPartsAsChannel()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setBodyParts(mime:Entity[] bodyParts)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets body parts to entity. This method overrides any existing `content-type` headers\nwith the default content type `multipart/form-data`. The default value `multipart/form-data` can be overridden\nby passing the content type as an optional parameter.\n  \n  \n---    \n**Parameters**  \n- _bodyParts_  \n    Represents the body parts that needs to be set to the entity  \n  \n- _contentType_  \n    Content-type to be used with the payload. This is an optional parameter.\n                `multipart/form-data` is used as the default value.  \nDefault Value: multipart/form-data"
        }
      },
      "sortText": "121",
      "insertText": "setBodyParts(${1:bodyParts});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getHeader(string headerName)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets the header value associated with the given header name.\n  \n  \n---    \n**Parameters**  \n- _headerName_  \n    Represents header name  \n  \n  \n**Return**  \nstring"
        }
      },
      "sortText": "121",
      "insertText": "getHeader(${1:headerName})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getHeaders(string headerName)(string[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets all the header values associated with the given header name.\n  \n  \n---    \n**Parameters**  \n- _headerName_  \n    The header name  \n  \n  \n**Return**  \nstring[]"
        }
      },
      "sortText": "121",
      "insertText": "getHeaders(${1:headerName})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "getHeaderNames()(string[])",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nGets all header names.\n  \n  \n---    \n**Parameters**  \n  \n  \n**Return**  \nstring[]"
        }
      },
      "sortText": "121",
      "insertText": "getHeaderNames()",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "addHeader(string headerName, string headerValue)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nAdds the given header value against the given header.\n  \n  \n---    \n**Parameters**  \n- _headerName_  \n    The header name  \n  \n- _headerValue_  \n    Represents the header value to be added  \n"
        }
      },
      "sortText": "121",
      "insertText": "addHeader(${1:headerName}, ${2:headerValue});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "setHeader(string headerName, string headerValue)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nSets the given header value against the existing header. If a header already exists, its value is replaced\nwith the given header value.\n  \n  \n---    \n**Parameters**  \n- _headerName_  \n    The header name  \n  \n- _headerValue_  \n    Represents the header value  \n"
        }
      },
      "sortText": "121",
      "insertText": "setHeader(${1:headerName}, ${2:headerValue});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeHeader(string headerName)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nRemoves the given header from the entity.\n  \n  \n---    \n**Parameters**  \n- _headerName_  \n    Represents the header name  \n"
        }
      },
      "sortText": "121",
      "insertText": "removeHeader(${1:headerName});",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "removeAllHeaders()",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nRemoves all headers associated with the entity.  \n  \n---    \n**Parameters**  \n"
        }
      },
      "sortText": "121",
      "insertText": "removeAllHeaders();",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "hasHeader(string headerName)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/mime_  \n  \nChecks whether the requested header key exists in the header map.\n  \n  \n---    \n**Parameters**  \n- _headerName_  \n    The header name  \n  \n  \n**Return**  \nboolean"
        }
      },
      "sortText": "121",
      "insertText": "hasHeader(${1:headerName})",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "new()",
      "kind": "Function",
      "detail": "Function",
      "sortText": "121",
      "insertText": "new();",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cType",
      "kind": "Variable",
      "detail": "mime:MediaType",
      "sortText": "221",
      "insertText": "cType",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cId",
      "kind": "Variable",
      "detail": "string",
      "sortText": "221",
      "insertText": "cId",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cLength",
      "kind": "Variable",
      "detail": "int",
      "sortText": "221",
      "insertText": "cLength",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "cDisposition",
      "kind": "Variable",
      "detail": "mime:ContentDisposition",
      "sortText": "221",
      "insertText": "cDisposition",
      "insertTextFormat": "Snippet"
    }
  ]
}